Group Members:
Evelyn Chen 704332587
Han Wang 104547543

Implementations:

1A:

We implemented the read-command.c by first getting characters from the file and forming a buffer character array. Then, we go through the character array and use one operator stack and one command stack to keep track of the precedence of the operators and build the command tree. We have a store_simple_command and get_next_word auxiliary functions that help store the simple commands.

1.for ;, we will check if ;;/<;/>;/\n; happens. And we will regard ;\n as a ;
2. for other operators like | || &&, we will check if < or > appears right before them.
and if \n appears before them.
3. for ), we will check if it final meets a ) and if < or > appears before it.
4. for < >, we will set the global variables: wait_input and wait_output as a signal.
And we will also check if </n or >/n happens.
5. for \n, we will check if #operators matches with #commands, if it’s followed by specials other than ( ).
6. when finish building, we will pop all the operators and commands and check it there’s only command left or nothing was pushed ever.
